{"version":3,"file":"index.esm-DaNM0Ui_.js","sources":["../../node_modules/@firebase/functions/dist/esm/index.esm.js"],"sourcesContent":["import { _isFirebaseServerApp, _registerComponent, registerVersion, _getProvider, getApp } from '@firebase/app';\nimport { FirebaseError, isCloudWorkstation, pingServer, updateEmulatorBanner, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\nfunction mapValues(\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n    const result = {};\n    for (const key in o) {\n        if (o.hasOwnProperty(key)) {\n            result[key] = f(o[key]);\n        }\n    }\n    return result;\n}\n/**\n * Takes data and encodes it in a JSON-friendly way, such that types such as\n * Date are preserved.\n * @internal\n * @param data - Data to encode.\n */\nfunction encode(data) {\n    if (data == null) {\n        return null;\n    }\n    if (data instanceof Number) {\n        data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n        // Any number in JS is safe to put directly in JSON and parse as a double\n        // without any loss of precision.\n        return data;\n    }\n    if (data === true || data === false) {\n        return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n        return data;\n    }\n    if (data instanceof Date) {\n        return data.toISOString();\n    }\n    if (Array.isArray(data)) {\n        return data.map(x => encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n        return mapValues(data, x => encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n/**\n * Takes data that's been encoded in a JSON-friendly form and returns a form\n * with richer datatypes, such as Dates, etc.\n * @internal\n * @param json - JSON to convert.\n */\nfunction decode(json) {\n    if (json == null) {\n        return json;\n    }\n    if (json['@type']) {\n        switch (json['@type']) {\n            case LONG_TYPE:\n            // Fall through and handle this the same as unsigned.\n            case UNSIGNED_LONG_TYPE: {\n                // Technically, this could work return a valid number for malformed\n                // data if there was a number followed by garbage. But it's just not\n                // worth all the extra code to detect that case.\n                const value = Number(json['value']);\n                if (isNaN(value)) {\n                    throw new Error('Data cannot be decoded from JSON: ' + json);\n                }\n                return value;\n            }\n            default: {\n                throw new Error('Data cannot be decoded from JSON: ' + json);\n            }\n        }\n    }\n    if (Array.isArray(json)) {\n        return json.map(x => decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n        return mapValues(json, x => decode(x));\n    }\n    // Anything else is safe to return.\n    return json;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap = {\n    OK: 'ok',\n    CANCELLED: 'cancelled',\n    UNKNOWN: 'unknown',\n    INVALID_ARGUMENT: 'invalid-argument',\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    NOT_FOUND: 'not-found',\n    ALREADY_EXISTS: 'already-exists',\n    PERMISSION_DENIED: 'permission-denied',\n    UNAUTHENTICATED: 'unauthenticated',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    FAILED_PRECONDITION: 'failed-precondition',\n    ABORTED: 'aborted',\n    OUT_OF_RANGE: 'out-of-range',\n    UNIMPLEMENTED: 'unimplemented',\n    INTERNAL: 'internal',\n    UNAVAILABLE: 'unavailable',\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error returned by the Firebase Functions client SDK.\n *\n * See {@link FunctionsErrorCode} for full documentation of codes.\n *\n * @public\n */\nclass FunctionsError extends FirebaseError {\n    /**\n     * Constructs a new instance of the `FunctionsError` class.\n     */\n    constructor(\n    /**\n     * A standard error code that will be returned to the client. This also\n     * determines the HTTP status code of the response, as defined in code.proto.\n     */\n    code, message, \n    /**\n     * Additional details to be converted to JSON and included in the error response.\n     */\n    details) {\n        super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n        this.details = details;\n        // Since the FirebaseError constructor sets the prototype of `this` to FirebaseError.prototype,\n        // we also have to do it in all subclasses to allow for correct `instanceof` checks.\n        Object.setPrototypeOf(this, FunctionsError.prototype);\n    }\n}\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status) {\n    // Make sure any successful status is OK.\n    if (status >= 200 && status < 300) {\n        return 'ok';\n    }\n    switch (status) {\n        case 0:\n            // This can happen if the server returns 500.\n            return 'internal';\n        case 400:\n            return 'invalid-argument';\n        case 401:\n            return 'unauthenticated';\n        case 403:\n            return 'permission-denied';\n        case 404:\n            return 'not-found';\n        case 409:\n            return 'aborted';\n        case 429:\n            return 'resource-exhausted';\n        case 499:\n            return 'cancelled';\n        case 500:\n            return 'internal';\n        case 501:\n            return 'unimplemented';\n        case 503:\n            return 'unavailable';\n        case 504:\n            return 'deadline-exceeded';\n    }\n    return 'unknown';\n}\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nfunction _errorForResponse(status, bodyJSON) {\n    let code = codeForHTTPStatus(status);\n    // Start with reasonable defaults from the status code.\n    let description = code;\n    let details = undefined;\n    // Then look through the body for explicit details.\n    try {\n        const errorJSON = bodyJSON && bodyJSON.error;\n        if (errorJSON) {\n            const status = errorJSON.status;\n            if (typeof status === 'string') {\n                if (!errorCodeMap[status]) {\n                    // They must've included an unknown error code in the body.\n                    return new FunctionsError('internal', 'internal');\n                }\n                code = errorCodeMap[status];\n                // TODO(klimt): Add better default descriptions for error enums.\n                // The default description needs to be updated for the new code.\n                description = status;\n            }\n            const message = errorJSON.message;\n            if (typeof message === 'string') {\n                description = message;\n            }\n            details = errorJSON.details;\n            if (details !== undefined) {\n                details = decode(details);\n            }\n        }\n    }\n    catch (e) {\n        // If we couldn't parse explicit error data, that's fine.\n    }\n    if (code === 'ok') {\n        // Technically, there's an edge case where a developer could explicitly\n        // return an error code of OK, and we will treat it as success, but that\n        // seems reasonable.\n        return null;\n    }\n    return new FunctionsError(code, description, details);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Helper class to get metadata that should be included with a function call.\n * @internal\n */\nclass ContextProvider {\n    constructor(app, authProvider, messagingProvider, appCheckProvider) {\n        this.app = app;\n        this.auth = null;\n        this.messaging = null;\n        this.appCheck = null;\n        this.serverAppAppCheckToken = null;\n        if (_isFirebaseServerApp(app) && app.settings.appCheckToken) {\n            this.serverAppAppCheckToken = app.settings.appCheckToken;\n        }\n        this.auth = authProvider.getImmediate({ optional: true });\n        this.messaging = messagingProvider.getImmediate({\n            optional: true\n        });\n        if (!this.auth) {\n            authProvider.get().then(auth => (this.auth = auth), () => {\n                /* get() never rejects */\n            });\n        }\n        if (!this.messaging) {\n            messagingProvider.get().then(messaging => (this.messaging = messaging), () => {\n                /* get() never rejects */\n            });\n        }\n        if (!this.appCheck) {\n            appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck), () => {\n                /* get() never rejects */\n            });\n        }\n    }\n    async getAuthToken() {\n        if (!this.auth) {\n            return undefined;\n        }\n        try {\n            const token = await this.auth.getToken();\n            return token?.accessToken;\n        }\n        catch (e) {\n            // If there's any error when trying to get the auth token, leave it off.\n            return undefined;\n        }\n    }\n    async getMessagingToken() {\n        if (!this.messaging ||\n            !('Notification' in self) ||\n            Notification.permission !== 'granted') {\n            return undefined;\n        }\n        try {\n            return await this.messaging.getToken();\n        }\n        catch (e) {\n            // We don't warn on this, because it usually means messaging isn't set up.\n            // console.warn('Failed to retrieve instance id token.', e);\n            // If there's any error when trying to get the token, leave it off.\n            return undefined;\n        }\n    }\n    async getAppCheckToken(limitedUseAppCheckTokens) {\n        if (this.serverAppAppCheckToken) {\n            return this.serverAppAppCheckToken;\n        }\n        if (this.appCheck) {\n            const result = limitedUseAppCheckTokens\n                ? await this.appCheck.getLimitedUseToken()\n                : await this.appCheck.getToken();\n            if (result.error) {\n                // Do not send the App Check header to the functions endpoint if\n                // there was an error from the App Check exchange endpoint. The App\n                // Check SDK will already have logged the error to console.\n                return null;\n            }\n            return result.token;\n        }\n        return null;\n    }\n    async getContext(limitedUseAppCheckTokens) {\n        const authToken = await this.getAuthToken();\n        const messagingToken = await this.getMessagingToken();\n        const appCheckToken = await this.getAppCheckToken(limitedUseAppCheckTokens);\n        return { authToken, messagingToken, appCheckToken };\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_REGION = 'us-central1';\nconst responseLineRE = /^data: (.*?)(?:\\n|$)/;\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type FunctionsError.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(millis) {\n    // Node timers and browser timers are fundamentally incompatible, but we\n    // don't care about the value here\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timer = null;\n    return {\n        promise: new Promise((_, reject) => {\n            timer = setTimeout(() => {\n                reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n            }, millis);\n        }),\n        cancel: () => {\n            if (timer) {\n                clearTimeout(timer);\n            }\n        }\n    };\n}\n/**\n * The main class for the Firebase Functions SDK.\n * @internal\n */\nclass FunctionsService {\n    /**\n     * Creates a new Functions service for the given app.\n     * @param app - The FirebaseApp to use.\n     */\n    constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl = (...args) => fetch(...args)) {\n        this.app = app;\n        this.fetchImpl = fetchImpl;\n        this.emulatorOrigin = null;\n        this.contextProvider = new ContextProvider(app, authProvider, messagingProvider, appCheckProvider);\n        // Cancels all ongoing requests when resolved.\n        this.cancelAllRequests = new Promise(resolve => {\n            this.deleteService = () => {\n                return Promise.resolve(resolve());\n            };\n        });\n        // Resolve the region or custom domain overload by attempting to parse it.\n        try {\n            const url = new URL(regionOrCustomDomain);\n            this.customDomain =\n                url.origin + (url.pathname === '/' ? '' : url.pathname);\n            this.region = DEFAULT_REGION;\n        }\n        catch (e) {\n            this.customDomain = null;\n            this.region = regionOrCustomDomain;\n        }\n    }\n    _delete() {\n        return this.deleteService();\n    }\n    /**\n     * Returns the URL for a callable with the given name.\n     * @param name - The name of the callable.\n     * @internal\n     */\n    _url(name) {\n        const projectId = this.app.options.projectId;\n        if (this.emulatorOrigin !== null) {\n            const origin = this.emulatorOrigin;\n            return `${origin}/${projectId}/${this.region}/${name}`;\n        }\n        if (this.customDomain !== null) {\n            return `${this.customDomain}/${name}`;\n        }\n        return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n    }\n}\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host The emulator host (ex: localhost)\n * @param port The emulator port (ex: 5001)\n * @public\n */\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\n    const useSsl = isCloudWorkstation(host);\n    functionsInstance.emulatorOrigin = `http${useSsl ? 's' : ''}://${host}:${port}`;\n    // Workaround to get cookies in Firebase Studio\n    if (useSsl) {\n        void pingServer(functionsInstance.emulatorOrigin + '/backends');\n        updateEmulatorBanner('Functions', true);\n    }\n}\n/**\n * Returns a reference to the callable https trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nfunction httpsCallable$1(functionsInstance, name, options) {\n    const callable = (data) => {\n        return call(functionsInstance, name, data, options || {});\n    };\n    callable.stream = (data, options) => {\n        return stream(functionsInstance, name, data, options);\n    };\n    return callable;\n}\n/**\n * Returns a reference to the callable https trigger with the given url.\n * @param url - The url of the trigger.\n * @public\n */\nfunction httpsCallableFromURL$1(functionsInstance, url, options) {\n    const callable = (data) => {\n        return callAtURL(functionsInstance, url, data, options || {});\n    };\n    callable.stream = (data, options) => {\n        return streamAtURL(functionsInstance, url, data, options || {});\n    };\n    return callable;\n}\nfunction getCredentials(functionsInstance) {\n    return functionsInstance.emulatorOrigin &&\n        isCloudWorkstation(functionsInstance.emulatorOrigin)\n        ? 'include'\n        : undefined;\n}\n/**\n * Does an HTTP POST and returns the completed response.\n * @param url The url to post to.\n * @param body The JSON body of the post.\n * @param headers The HTTP headers to include in the request.\n * @param functionsInstance functions instance that is calling postJSON\n * @return A Promise that will succeed when the request finishes.\n */\nasync function postJSON(url, body, headers, fetchImpl, functionsInstance) {\n    headers['Content-Type'] = 'application/json';\n    let response;\n    try {\n        response = await fetchImpl(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers,\n            credentials: getCredentials(functionsInstance)\n        });\n    }\n    catch (e) {\n        // This could be an unhandled error on the backend, or it could be a\n        // network error. There's no way to know, since an unhandled error on the\n        // backend will fail to set the proper CORS header, and thus will be\n        // treated as a network error by fetch.\n        return {\n            status: 0,\n            json: null\n        };\n    }\n    let json = null;\n    try {\n        json = await response.json();\n    }\n    catch (e) {\n        // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n        status: response.status,\n        json\n    };\n}\n/**\n * Creates authorization headers for Firebase Functions requests.\n * @param functionsInstance The Firebase Functions service instance.\n * @param options Options for the callable function, including AppCheck token settings.\n * @return A Promise that resolves a headers map to include in outgoing fetch request.\n */\nasync function makeAuthHeaders(functionsInstance, options) {\n    const headers = {};\n    const context = await functionsInstance.contextProvider.getContext(options.limitedUseAppCheckTokens);\n    if (context.authToken) {\n        headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.messagingToken) {\n        headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n    }\n    if (context.appCheckToken !== null) {\n        headers['X-Firebase-AppCheck'] = context.appCheckToken;\n    }\n    return headers;\n}\n/**\n * Calls a callable function asynchronously and returns the result.\n * @param name The name of the callable trigger.\n * @param data The data to pass as params to the function.\n */\nfunction call(functionsInstance, name, data, options) {\n    const url = functionsInstance._url(name);\n    return callAtURL(functionsInstance, url, data, options);\n}\n/**\n * Calls a callable function asynchronously and returns the result.\n * @param url The url of the callable trigger.\n * @param data The data to pass as params to the function.\n */\nasync function callAtURL(functionsInstance, url, data, options) {\n    // Encode any special types, such as dates, in the input data.\n    data = encode(data);\n    const body = { data };\n    // Add a header for the authToken.\n    const headers = await makeAuthHeaders(functionsInstance, options);\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n    const failAfterHandle = failAfter(timeout);\n    const response = await Promise.race([\n        postJSON(url, body, headers, functionsInstance.fetchImpl, functionsInstance),\n        failAfterHandle.promise,\n        functionsInstance.cancelAllRequests\n    ]);\n    // Always clear the failAfter timeout\n    failAfterHandle.cancel();\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n        throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\n    }\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(response.status, response.json);\n    if (error) {\n        throw error;\n    }\n    if (!response.json) {\n        throw new FunctionsError('internal', 'Response is not valid JSON object.');\n    }\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n        responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n        // Consider the response malformed.\n        throw new FunctionsError('internal', 'Response is missing data field.');\n    }\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = decode(responseData);\n    return { data: decodedData };\n}\n/**\n * Calls a callable function asynchronously and returns a streaming result.\n * @param name The name of the callable trigger.\n * @param data The data to pass as params to the function.\n * @param options Streaming request options.\n */\nfunction stream(functionsInstance, name, data, options) {\n    const url = functionsInstance._url(name);\n    return streamAtURL(functionsInstance, url, data, options || {});\n}\n/**\n * Calls a callable function asynchronously and return a streaming result.\n * @param url The url of the callable trigger.\n * @param data The data to pass as params to the function.\n * @param options Streaming request options.\n */\nasync function streamAtURL(functionsInstance, url, data, options) {\n    // Encode any special types, such as dates, in the input data.\n    data = encode(data);\n    const body = { data };\n    //\n    // Add a header for the authToken.\n    const headers = await makeAuthHeaders(functionsInstance, options);\n    headers['Content-Type'] = 'application/json';\n    headers['Accept'] = 'text/event-stream';\n    let response;\n    try {\n        response = await functionsInstance.fetchImpl(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers,\n            signal: options?.signal,\n            credentials: getCredentials(functionsInstance)\n        });\n    }\n    catch (e) {\n        if (e instanceof Error && e.name === 'AbortError') {\n            const error = new FunctionsError('cancelled', 'Request was cancelled.');\n            return {\n                data: Promise.reject(error),\n                stream: {\n                    [Symbol.asyncIterator]() {\n                        return {\n                            next() {\n                                return Promise.reject(error);\n                            }\n                        };\n                    }\n                }\n            };\n        }\n        // This could be an unhandled error on the backend, or it could be a\n        // network error. There's no way to know, since an unhandled error on the\n        // backend will fail to set the proper CORS header, and thus will be\n        // treated as a network error by fetch.\n        const error = _errorForResponse(0, null);\n        return {\n            data: Promise.reject(error),\n            // Return an empty async iterator\n            stream: {\n                [Symbol.asyncIterator]() {\n                    return {\n                        next() {\n                            return Promise.reject(error);\n                        }\n                    };\n                }\n            }\n        };\n    }\n    let resultResolver;\n    let resultRejecter;\n    const resultPromise = new Promise((resolve, reject) => {\n        resultResolver = resolve;\n        resultRejecter = reject;\n    });\n    options?.signal?.addEventListener('abort', () => {\n        const error = new FunctionsError('cancelled', 'Request was cancelled.');\n        resultRejecter(error);\n    });\n    const reader = response.body.getReader();\n    const rstream = createResponseStream(reader, resultResolver, resultRejecter, options?.signal);\n    return {\n        stream: {\n            [Symbol.asyncIterator]() {\n                const rreader = rstream.getReader();\n                return {\n                    async next() {\n                        const { value, done } = await rreader.read();\n                        return { value: value, done };\n                    },\n                    async return() {\n                        await rreader.cancel();\n                        return { done: true, value: undefined };\n                    }\n                };\n            }\n        },\n        data: resultPromise\n    };\n}\n/**\n * Creates a ReadableStream that processes a streaming response from a streaming\n * callable function that returns data in server-sent event format.\n *\n * @param reader The underlying reader providing raw response data\n * @param resultResolver Callback to resolve the final result when received\n * @param resultRejecter Callback to reject with an error if encountered\n * @param signal Optional AbortSignal to cancel the stream processing\n * @returns A ReadableStream that emits decoded messages from the response\n *\n * The returned ReadableStream:\n *   1. Emits individual messages when \"message\" data is received\n *   2. Resolves with the final result when a \"result\" message is received\n *   3. Rejects with an error if an \"error\" message is received\n */\nfunction createResponseStream(reader, resultResolver, resultRejecter, signal) {\n    const processLine = (line, controller) => {\n        const match = line.match(responseLineRE);\n        // ignore all other lines (newline, comments, etc.)\n        if (!match) {\n            return;\n        }\n        const data = match[1];\n        try {\n            const jsonData = JSON.parse(data);\n            if ('result' in jsonData) {\n                resultResolver(decode(jsonData.result));\n                return;\n            }\n            if ('message' in jsonData) {\n                controller.enqueue(decode(jsonData.message));\n                return;\n            }\n            if ('error' in jsonData) {\n                const error = _errorForResponse(0, jsonData);\n                controller.error(error);\n                resultRejecter(error);\n                return;\n            }\n        }\n        catch (error) {\n            if (error instanceof FunctionsError) {\n                controller.error(error);\n                resultRejecter(error);\n                return;\n            }\n            // ignore other parsing errors\n        }\n    };\n    const decoder = new TextDecoder();\n    return new ReadableStream({\n        start(controller) {\n            let currentText = '';\n            return pump();\n            async function pump() {\n                if (signal?.aborted) {\n                    const error = new FunctionsError('cancelled', 'Request was cancelled');\n                    controller.error(error);\n                    resultRejecter(error);\n                    return Promise.resolve();\n                }\n                try {\n                    const { value, done } = await reader.read();\n                    if (done) {\n                        if (currentText.trim()) {\n                            processLine(currentText.trim(), controller);\n                        }\n                        controller.close();\n                        return;\n                    }\n                    if (signal?.aborted) {\n                        const error = new FunctionsError('cancelled', 'Request was cancelled');\n                        controller.error(error);\n                        resultRejecter(error);\n                        await reader.cancel();\n                        return;\n                    }\n                    currentText += decoder.decode(value, { stream: true });\n                    const lines = currentText.split('\\n');\n                    currentText = lines.pop() || '';\n                    for (const line of lines) {\n                        if (line.trim()) {\n                            processLine(line.trim(), controller);\n                        }\n                    }\n                    return pump();\n                }\n                catch (error) {\n                    const functionsError = error instanceof FunctionsError\n                        ? error\n                        : _errorForResponse(0, null);\n                    controller.error(functionsError);\n                    resultRejecter(functionsError);\n                }\n            }\n        },\n        cancel() {\n            return reader.cancel();\n        }\n    });\n}\n\nconst name = \"@firebase/functions\";\nconst version = \"0.13.1\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst AUTH_INTERNAL_NAME = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\nfunction registerFunctions(variant) {\n    const factory = (container, { instanceIdentifier: regionOrCustomDomain }) => {\n        // Dependencies\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n        const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n        const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain);\n    };\n    _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n    registerVersion(name, version, variant);\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    registerVersion(name, version, 'esm2020');\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a {@link Functions} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param regionOrCustomDomain - one of:\n *   a) The region the callable functions are located in (ex: us-central1)\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\n * @public\n */\nfunction getFunctions(app = getApp(), regionOrCustomDomain = DEFAULT_REGION) {\n    // Dependencies\n    const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\n    const functionsInstance = functionsProvider.getImmediate({\n        identifier: regionOrCustomDomain\n    });\n    const emulator = getDefaultEmulatorHostnameAndPort('functions');\n    if (emulator) {\n        connectFunctionsEmulator(functionsInstance, ...emulator);\n    }\n    return functionsInstance;\n}\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @public\n */\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\n    connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\n}\n/**\n * Returns a reference to the callable HTTPS trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nfunction httpsCallable(functionsInstance, name, options) {\n    return httpsCallable$1(getModularInstance(functionsInstance), name, options);\n}\n/**\n * Returns a reference to the callable HTTPS trigger with the specified url.\n * @param url - The url of the trigger.\n * @public\n */\nfunction httpsCallableFromURL(functionsInstance, url, options) {\n    return httpsCallableFromURL$1(getModularInstance(functionsInstance), url, options);\n}\n\n/**\n * Cloud Functions for Firebase\n *\n * @packageDocumentation\n */\nregisterFunctions();\n\nexport { FunctionsError, connectFunctionsEmulator, getFunctions, httpsCallable, httpsCallableFromURL };\n//# sourceMappingURL=index.esm.js.map\n"],"names":["mapValues","o","f","result","key","hasOwnProperty","encode","data","Number","valueOf","isFinite","Object","prototype","toString","call","Date","toISOString","Array","isArray","map","x","Error","decode","json","value","isNaN","FUNCTIONS_TYPE","errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FunctionsError","FirebaseError","constructor","code","message","details","super","this","setPrototypeOf","_errorForResponse","status","bodyJSON","codeForHTTPStatus","description","errorJSON","error","e","ContextProvider","app","authProvider","messagingProvider","appCheckProvider","auth","messaging","appCheck","serverAppAppCheckToken","_isFirebaseServerApp","settings","appCheckToken","getImmediate","optional","get","then","getAuthToken","token","getToken","accessToken","getMessagingToken","self","Notification","permission","getAppCheckToken","limitedUseAppCheckTokens","getLimitedUseToken","getContext","authToken","messagingToken","DEFAULT_REGION","responseLineRE","FunctionsService","regionOrCustomDomain","fetchImpl","args","fetch","emulatorOrigin","contextProvider","cancelAllRequests","Promise","resolve","deleteService","url","URL","customDomain","origin","pathname","region","_delete","_url","name","projectId","options","httpsCallable$1","functionsInstance","callable","async","body","headers","makeAuthHeaders","timeout","failAfterHandle","millis","timer","promise","_","reject","setTimeout","cancel","clearTimeout","failAfter","response","race","postJSON","responseData","callAtURL","stream","resultResolver","resultRejecter","method","JSON","stringify","signal","credentials","getCredentials","Symbol","asyncIterator","next","resultPromise","_a","addEventListener","rstream","reader","processLine","line","controller","match","jsonData","parse","enqueue","decoder","TextDecoder","ReadableStream","start","currentText","pump","aborted","done","read","trim","close","lines","split","pop","functionsError","createResponseStream","getReader","rreader","streamAtURL","isCloudWorkstation","context","version","getFunctions","getApp","_getProvider","getModularInstance","identifier","emulator","getDefaultEmulatorHostnameAndPort","host","port","useSsl","pingServer","updateEmulatorBanner","connectFunctionsEmulator$1","connectFunctionsEmulator","httpsCallable","variant","_registerComponent","Component","container","instanceIdentifier","getProvider","setMultipleInstances","registerVersion"],"mappings":"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","x_google_ignoreList":[0]}